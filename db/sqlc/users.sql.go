// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createusers = `-- name: Createusers :one
INSERT INTO users (
    full_name,    
    country_code
) VALUES (
    $1, $2
) RETURNING id, full_name, created_at, country_code
`

type CreateusersParams struct {
	FullName    sql.NullString `json:"full_name"`
	CountryCode sql.NullInt32  `json:"country_code"`
}

func (q *Queries) Createusers(ctx context.Context, arg CreateusersParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createusers, arg.FullName, arg.CountryCode)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.CountryCode,
	)
	return i, err
}

const deleteusers = `-- name: Deleteusers :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) Deleteusers(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteusers, id)
	return err
}

const getusers = `-- name: Getusers :one
SELECT id, full_name, created_at, country_code FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getusers(ctx context.Context, id int64) (Users, error) {
	row := q.db.QueryRowContext(ctx, getusers, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.CountryCode,
	)
	return i, err
}

const getusersForUpdate = `-- name: GetusersForUpdate :one
SELECT id, full_name, created_at, country_code FROM users
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetusersForUpdate(ctx context.Context, id int64) (Users, error) {
	row := q.db.QueryRowContext(ctx, getusersForUpdate, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.CountryCode,
	)
	return i, err
}

const listusers = `-- name: Listusers :many
SELECT id, full_name, created_at, country_code FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListusersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listusers(ctx context.Context, arg ListusersParams) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, listusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.CreatedAt,
			&i.CountryCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateusers = `-- name: Updateusers :one
UPDATE users
SET full_name = $2
WHERE id = $1
RETURNING id, full_name, created_at, country_code
`

type UpdateusersParams struct {
	ID       int64          `json:"id"`
	FullName sql.NullString `json:"full_name"`
}

func (q *Queries) Updateusers(ctx context.Context, arg UpdateusersParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateusers, arg.ID, arg.FullName)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.CountryCode,
	)
	return i, err
}
